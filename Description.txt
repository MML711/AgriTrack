Description of a Product or Service  
Imagine a system tailor-made for farmers. It's your dedicated tool to track yields, sell products, and connect directly with customers. Farmers can log their crop yields and list products, while customers can browse and purchase with ease. It’s not just a database; it’s a marketplace with sales reports and notifications. Farmers get more control, and customers get better access to fresh produce.

Audience  
Meet Dan, a seasoned farmer. He's tech-oriented yet practical. He strives for efficiency in his operations while reaching customers directly.  
Three Key Persona Insights:  
- Efficiency-driven: Wants an easy way to track and manage yields.  
- Customer-focused: Desires a direct line to sell fresh produce to consumers.  
- Data-minded: Values insightful reports to maximize yield and profit.  
Audience Properties:  
- Key Demographics: Adults 30-60, farm owners, rural area dwellers.  
- Key Psychographics: Tech-adaptive, business-minded, community-focused.  
- Pain Points: Difficulty managing yields and accessing direct sales channels.  
- Buying Process: Values user-friendly systems, seeks reliable tech, and acts on peer recommendations.  
- Brands & Tone: Favors straightforward and helpful brands like John Deere, appreciates a supportive tone.

Job  
The website's primary job is efficiency. It simplifies yield tracking and sales management, making it a hub for farming productivity. The aim is to streamline farmers' operations while enhancing customer outreach.

Messaging and Tone  
Brand Archetype: Caregiver (service)  
Tone Characteristics:  
- Informative, Cheerful: Convey clarity and approachability.  
- Trustworthy, Conversational: Instill confidence through straightforward communication.  
- Caring, Respectful: Show commitment to farmers' success and consumer satisfaction.  
- Enthusiastic, Passionate: Highlight the platform's potential to revolutionize farm management.  
Example Messaging:  
"Track, sell, and succeed with ease."  
"Empower your farm with direct customer access."  
"Farm smarter: Harness data and drive sales."

Design Direction  
- Functional design: Highlighting easy access and usability.  
- Farm imagery: Relatable visuals for farmers.  
- Intuitive navigation: Minimal clicks for maximum results.  
- Earth-toned color palette: Reflecting agriculture's nature link.

Website Structure  
- Home Page: Feature products and categories.  
- Product Page: Include details, reviews, and purchase options.  
- Farmer Dashboard: Yield tracking, product listing, and sales management.  
- Customer Dashboard: Order viewing, product favorites, and review options.  
- Admin Dashboard: Users, products, and order management.  
- FAQ: Address common inquiries.  
- Footer: Contact info and resources.


----------------------------------------------------------------------------------------------------------------

INSERT INTO `products` (`pic`) VALUES
(`https://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Tomato_je.jpg/1200px-Tomato_je.jpg`),
(`https://m.media-amazon.com/images/I/41QKCkQ2A5L.jpg`),
(`https://punarjanispices.com/wp-content/uploads/2023/05/1NjnqfBEDCZF8soVFB1u_0FH1FjKsrzLt_3a52a355-c738-41f7-bfd5-944049aa184a_700x700.jpg`),
(`https://static.libertyprim.com/files/familles/pomme-large.jpg?1569271834`),
(`https://media-cldnry.s-nbcnews.com/image/upload/t_fit-560w,f_auto,q_auto:best/rockcms/2022-10/bananas-mc-221004-02-3ddd88.jpg`),
(`https://www.allrecipes.com/thmb/1c99SWam7_FM6vUzpDDzIKffMR4=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/ALR-strawberry-fruit-or-vegetable-f6dd901427714e46af2d706a57b9016f.jpg`),
(`https://lettuceinfo.org/wp-content/uploads/2020/09/Spinach.jpg`),
(`https://gofresh.com.kw/wp-content/uploads/2023/10/Rosner-Lettuce-1.jpg`),
(`https://www.defruithof.nl/wp-content/uploads/2022/08/F1663.jpg`),
(`https://www.heythattastesgood.com/wp-content/uploads/2022/06/orange-fruits.jpg`),
(`https://draxe.com/wp-content/uploads/2016/08/DrAxePeachFB.jpg`),
(`https://www.groworganic.com/cdn/shop/products/green-finger-cucumber-028-web.jpg?v=1571743024&width=800`),
(`https://images.healthshots.com/healthshots/en/uploads/2024/07/24112903/1-40.jpg`),
(`https://promisedlandproduce.com.au/cdn/shop/products/Watermelon_316145534.jpg?v=1605724266`),
(`https://img.freepik.com/fotos-premium/mango-frutas-tropicais-em-um-fundo-escuro-copiar-espaco_607202-11888.jpg`),
(`https://www.healthxchange.sg/sites/hexassets/Assets/food-nutrition/pineapple-health-benefits-and-ways-to-enjoy.jpg`),
(`https://blog.lexmed.com/images/librariesprovider80/blog-post-featured-images/avocadosea5afd66b7296e538033ff0000e6f23e.jpg?sfvrsn=a273930b_0`),
(`https://www.health.com/thmb/CtlUl-Ka_h64xiMh7c-eZWvs87c=/724x0/filters:no_upscale():max_bytes(150000):strip_icc()/GettyImages-670247782-33772a33262945fc97802b6ddd63e5e0.jpg`),
(`https://www.bradleysmoker.com/cdn/shop/articles/Smoked-Marinated-Eggplant-Recipe-scaled.jpg?v=1675739133&width=1500`),
(`https://chefsmandala.com/wp-content/uploads/2018/03/Squash-Zucchini.jpg`),
(`https://m.media-amazon.com/images/I/515nb4nr3BL.jpg`),


[
    {
       "id": 3,
       "amount": 240,
       "location": {"city": "Mekelle", "address": "Planet Hotel", "country": "Ethiopia"}
    },
    {
       "id": 4,
       "amount": 320,
       "location": {"city": "Addis Ababa", "address": "Gerji", "country": "Ethiopia"}
    },
    {
       "id": 5,
       "amount": 170,
       "location": {"city": "Hawassa", "address": "Lake View", "country": "Ethiopia"}
    },   
]





import express from "express";
import Stripe from "stripe";
import { db } from "../connect.js";
import axios from "axios";

const router = express.Router();
const stripe = Stripe(process.env.STRIPE_KEY);
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;

router.post("/payment", async (req, res) => {
  // stripe.charges.create(
  //   {
  //     source: req.body.tokenId,
  //     amount: req.body.amount,
  //     currency: "usd",
  //   },
  //   (srtipeErr, stripeRes) => {
  //     if (srtipeErr) {
  //       res.status(500).json(srtipeErr);
  //     } else {
  //       res.status(200).json(stripeRes);
  //     }
  //   }
  // );

  const {
    tokenId,
    amount,
    customerName,
    shippingCountry,
    shippingAddress,
    shippingCity,
    shippingZip,
    products,
  } = req.body;

  try {
    // Create the charge with Stripe
    const charge = await stripe.charges.create({
      amount: amount * 100, // Stripe requires amount in cents
      currency: "usd",
      description: "Shopping Cart Payment",
      source: tokenId,
      shipping: {
        name: customerName, // Customize this with customer data if needed
        address: {
          country: shippingCountry,
          line1: shippingAddress,
          city: shippingCity,
          postal_code: shippingZip,
          // country: 'US', // Adjust as needed
        },
      },
    });

    const shipping_location = {
      city: shippingCity,
      address: shippingAddress,
      country: shippingCountry,
    };

    products.forEach((product) => {

      const q = INSERT INTO orders (customer_id, product_id, quantity, total_price, shipping_address) 
          VALUES (?, ?, ?, ?, ?);

      const values = [
        2,
        product.id,
        product.quantity,
        product.quantity * product.price,
        JSON.stringify(shipping_location),
      ];

      db.query(q, values, (err, data) => {
        console.log("Inside INSERT INTO orders");
        if (err) {
          console.log(err);
          return res.status(500).json(err);
        }

        // Get the inserted row ID
        const insertedOrderId = data.insertId;

        const q1 = SELECT stocks.id, stocks.farmer_id, stocks.amount, stock.location FROM stocks where stocks.product_id = ?;

        db.query(q1, [product.id], (err, data) => {
          console.log("Inside SELECT FROM stocks");
          if (err) {
            console.log(err);
            return res.status(500).json(err);
          }

          const locations = [];

          data.forEach((stockInfo) => {
            locations.push(
              ${stockInfo.location.address}, ${stockInfo.location.city}, ${stockInfo.location.country}
            );
          });

          let comparison = true;
          while (comparison) {
            getNearestLocation(shipping_location, locations)
              .then(({ idx, nearestLocation }) => {
                console.log("Nearest Location:", nearestLocation);

                if (product.quantity >= data[idx].amount) {
                  console.log("while loop if");

                  const q2 = INSERT INTO earnings (order_id, product_id, farmer_id, contribution, earning) 
                              VALUES (?, ?, ?, ?, ?);
                  const val2 = [
                    insertedOrderId,
                    product.id,
                    data[idx].farmer_id,
                    data[idx].amount,
                    data[idx].amount * product.price,
                  ];

                  db.query(q2, val2, (err, data) => {
                    console.log("Inside INSERT INTO earmings");
                    if (err) {
                      console.log(err);
                      return res.status(500).json(err);
                    }
                  });

                  product.quantity = product.quantity - data[idx].amount;
                  const q3 = DELETE FROM stocks WHERE stocks.id = ?;

                  db.query(q3, [data[idx].id], (err, data) => {
                    if (err) {
                      console.log(err);
                      return res.status(500).json(err);
                    }
                  });

                  data.splice(idx, 1);

                  // comparison;
                } else {
                  console.log("while loop else");

                  const q2 = INSERT INTO earnings (order_id, product_id, farmer_id, contribution, earning) 
                              VALUES (?, ?, ?, ?, ?);
                  const val2 = [
                    insertedOrderId,
                    product.id,
                    data[idx].farmer_id,
                    product.quantity,
                    product.quantity * product.price,
                  ];

                  db.query(q2, val2, (err, data) => {
                    console.log("INSERT INTO earnings");

                    if (err) {
                      console.log(err);
                      return res.status(500).json(err);
                    }
                  });

                  const q3 = UPDATE stocks SET stocks.amount = ? WHERE stocks.id = ?;
                  db.query(
                    q3,
                    [data[idx].amount - product.quantity, data[idx].id],
                    (err, data) => {
                      if (err) {
                        console.log(err);
                        return res.status(500).json(err);
                      }
                    }
                  );

                  comparison = false;
                }
                // data[idx].id
              })
              .catch((error) => {
                console.error("Error:", error);
              });
          }

          // return res.status(200).json(data);
        });
        return res.status(200).json(data);
      });
    });
    console.log("it works yay!");

    // Respond with success
    res.status(200).json({ success: true, charge });
  } catch (error) {
    console.error("Error processing payment:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

export default router;

// Function to get the nearest location using Google Distance Matrix API
const getNearestLocation = async (shippingAddress, locations) => {
  const {
    shippingAddress: address,
    shippingCity: city,
    shippingCountry: country,
  } = shippingAddress;

  // Create the full address to pass to the API
  const origin = ${address}, ${city}, ${country};

  // Prepare the list of destinations (list of locations) you want to compare with
  const destinations = locations.join("|");

  const url = https://maps.googleapis.com/maps/api/distancematrix/json?origins=${encodeURIComponent(
    origin
  )}&destinations=${encodeURIComponent(destinations)}&key=${GOOGLE_API_KEY};
  // const urlfgh = https://maps.googleapis.com/maps/api/distancematrix/json?origins=${encodeURIComponent('Lebu, Addis Ababa, Ethiopia')}&destinations=${encodeURIComponent("'Planet Hotel, Mekelle, Ethiopia'|'Lake View, Hawassa, Ethiopia'|'Geri, Addis Ababa, Ethiopia'")}&key=AIzaSyD4c8TBoFHf4Wfx8ErT0DDwFAixhvIfB34;

  try {
    const response = await axios.get(url);
    const distances = response.data.rows[0].elements;

    let nearestLocation = null;
    let minDistance = Infinity;
    let idx;

    // Find the location with the shortest distance
    distances.forEach((distance, index) => {
      if (distance.status === "OK" && distance.distance.value < minDistance) {
        nearestLocation = locations[index];
        minDistance = distance.distance.value;
        idx = index;
      }
    });

    return { idx, nearestLocation }; // The nearest location from the list
  } catch (error) {
    console.error("Error fetching distance data:", error);
    throw new Error("Unable to calculate nearest location");
  }
};

// Example usage
const shippingAddress = {
  shippingAddress: "123 Main St",
  shippingCity: "Springfield",
  shippingZip: "62701",
  shippingCountry: "US",
};

const locations = [
  "Los Angeles, CA",
  "Chicago, IL",
  "New York, NY",
  "Houston, TX",
];

// getNearestLocation(shippingAddress, locations)
//   .then(nearestLocation => {
//     console.log("Nearest Location:", nearestLocation);
//   })
//   .catch(error => {
//     console.error("Error:", error);
//   });